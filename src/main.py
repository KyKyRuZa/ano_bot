import asyncio
import uvicorn
import asyncpg
import logging
import sys
import os

from fastapi import Request
from fastapi.staticfiles import StaticFiles
from aiogram import Bot, Dispatcher
from aiogram.types import Message, Update
from config import (
    API_TOKEN,MEDIA_ROOT,DB_CONFIG,
    WEBHOOK_PATH,API_HOST,API_PORT,SSL_KEYFILE,SSL_CERTFILE
)
from database.db import init_db
from api.api import app
from src.services.media import MediaProcessor
from src.hook.webhook import WebhookManager

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%d.%m.%Y, %H:%M:%S"
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

media_processor = MediaProcessor(bot, dp.pool) 

webhook_manager = WebhookManager(bot)

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    logger.debug("üì• –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫")
    try:
        data = await request.json()
        update = Update(**data)
        await dp.feed_update(bot, update)
        logger.debug("üì® –ê–ø–¥–µ–π—Ç –ø–µ—Ä–µ–¥–∞–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É")
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return {"status": "error", "message": str(e)}

async def start_api_server():
    try:
        if not os.path.exists(SSL_KEYFILE):
            logger.critical(f"‚ùå SSL –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {SSL_KEYFILE}")
            raise FileNotFoundError(f"SSL key file not found at {SSL_KEYFILE}")
        if not os.path.exists(SSL_CERTFILE):
            logger.critical(f"‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {SSL_CERTFILE}")
            raise FileNotFoundError(f"SSL cert file not found at {SSL_CERTFILE}")
        config = uvicorn.Config(
            app,
            host=API_HOST,
            port=API_PORT,
            ssl_keyfile=SSL_KEYFILE,
            ssl_certfile=SSL_CERTFILE
        )
        server = uvicorn.Server(config)
        logger.info(f"üü¢ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://{API_HOST}:{API_PORT}") 
        await server.serve()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä: {e}")
        raise

async def keep_db_connection_alive(pool):
    while True:
        try:
            async with pool.acquire() as conn:
                await conn.execute("SELECT 1")
            logger.debug("üîÅ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∞–∫—Ç–∏–≤–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: {e}. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞...")
            try:
                pool = await asyncpg.create_pool(**DB_CONFIG)
                dp.pool = pool
                logger.info("‚ôªÔ∏è –ü—É–ª –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—É–ª –ë–î: {e}")
        await asyncio.sleep(1800)

app.mount("/uploads", StaticFiles(directory=str(MEDIA_ROOT)), name="uploads")

async def main():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ API —Å–µ—Ä–≤–µ—Ä–∞")
    dp.pool = None

    try:
        dp.pool = await asyncpg.create_pool(**DB_CONFIG, min_size=5, max_size=20)
        await init_db(dp.pool)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        media_processor = MediaProcessor(bot, dp.pool)
        webhook_manager = WebhookManager(bot)


        dp.message.register(media_processor.process_message_media)
        dp.channel_post.register(media_processor.process_message_media)

        me = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{me.username}")
        await webhook_manager.send_alert_to_admin(f"üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{me.username}")

        if not await webhook_manager.setup_webhook():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫")
            return

        asyncio.create_task(keep_db_connection_alive(dp.pool))
        asyncio.create_task(webhook_manager.monitor_webhook())
        
        logger.info("üü¢ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
        await start_api_server()

    except Exception as e:
        logger.critical(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await webhook_manager.send_alert_to_admin(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        if dp.pool:
            await dp.pool.close()
        await bot.session.close()
        logger.info("üßπ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.abspath(__file__)))
    asyncio.run(main())